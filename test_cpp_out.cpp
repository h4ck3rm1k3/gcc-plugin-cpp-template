#include "test_tree.cpp"
#include "defines.h"

void define_class_CLS_0_vec() { 
  define_generic_class_name<vec<int,int>>("vec");
}; 
void define_class_CLS_1_va_gc() { 
	 define_generic_class_name<va_gc>("va_gc");
}; 
void define_class_CLS_2_ht_identifier() { 
	 define_generic_class_name<ht_identifier>("ht_identifier");
	 define_generic_field (&ht_identifier::str,"str",0,0,0,64);
	 define_generic_field (&ht_identifier::len,"len",0,0,64,32);
	 define_generic_field (&ht_identifier::hash_value,"hash_value",0,0,96,32);
}; 
void define_class_CLS_3_obstack() { 
	 define_generic_class_name<obstack>("obstack");
}; 
void define_class_CLS_4_ht() { 
	 define_generic_class_name<ht>("ht");
	 define_generic_field (&ht::stack,"stack",0,0,0,8);
	 define_generic_field (&ht::entries,"entries",0,0,64,64);
	 define_generic_field (&ht::nslots,"nslots",0,16,0,32);
	 define_generic_field (&ht::nelements,"nelements",0,16,32,32);
	 define_generic_field (&ht::pfile,"pfile",0,16,64,64);
	 define_generic_field (&ht::searches,"searches",0,32,0,32);
	 define_generic_field (&ht::collisions,"collisions",0,32,32,32);
	 define_generic_field (&ht::entries_owned,"entries_owned",0,32,64,8);
}; 
void define_class_CLS_5_alias_pair() { 
	 define_generic_class_name<alias_pair>("alias_pair");
	 define_generic_field (&alias_pair::decl,"decl",0,0,0,64);
	 define_generic_field (&alias_pair::target,"target",0,0,64,64);
}; 
void define_class_CLS_6_tree_base_flags() { 
  define_generic_class_name<tree_base::tree_base_union::tree_base_flags>("tree_base_flags");
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_0",1,0,0,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_1",1,0,1,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_2",1,0,2,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_3",1,0,3,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_4",1,0,4,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_5",1,0,5,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("lang_flag_6",1,0,6,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("saturating_flag",1,0,7,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("unsigned_flag",1,0,8,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("packed_flag",1,0,9,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("user_align",1,0,10,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("nameless_flag",1,0,11,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("atomic_flag",1,0,12,1);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("spare0",1,0,13,3);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("spare1",1,0,16,8);
	 define_generic_bitfield<tree_base::tree_base_union::tree_base_flags>("address_space",1,0,24,8);
}; 
void define_class_CLS_7_tree_base() { 
	 define_generic_class_name<tree_base>("tree_base");
	 define_generic_bitfield<tree_base>("code",1,0,0,16);
	 define_generic_bitfield<tree_base>("side_effects_flag",1,0,16,1);
	 define_generic_bitfield<tree_base>("constant_flag",1,0,17,1);
	 define_generic_bitfield<tree_base>("addressable_flag",1,0,18,1);
	 define_generic_bitfield<tree_base>("volatile_flag",1,0,19,1);
	 define_generic_bitfield<tree_base>("readonly_flag",1,0,20,1);
	 define_generic_bitfield<tree_base>("asm_written_flag",1,0,21,1);
	 define_generic_bitfield<tree_base>("nowarning_flag",1,0,22,1);
	 define_generic_bitfield<tree_base>("visited",1,0,23,1);
	 define_generic_bitfield<tree_base>("used_flag",1,0,24,1);
	 define_generic_bitfield<tree_base>("nothrow_flag",1,0,25,1);
	 define_generic_bitfield<tree_base>("static_flag",1,0,26,1);
	 define_generic_bitfield<tree_base>("public_flag",1,0,27,1);
	 define_generic_bitfield<tree_base>("private_flag",1,0,28,1);
	 define_generic_bitfield<tree_base>("protected_flag",1,0,29,1);
	 define_generic_bitfield<tree_base>("deprecated_flag",1,0,30,1);
	 define_generic_bitfield<tree_base>("default_def_flag",1,0,31,1);
	 define_generic_field (&tree_base::u,"u",0,0,32,32);
}; 
void define_class_CLS_8_tree_typed() { 
	 define_generic_class_name<tree_typed>("tree_typed");
	 define_generic_field (&tree_typed::base,"base",0,0,0,64);
	 define_generic_field (&tree_typed::type,"type",0,0,64,64);
}; 
void define_class_CLS_9_tree_common() { 
	 define_generic_class_name<tree_common>("tree_common");
	 define_generic_field (&tree_common::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_common::chain,"chain",0,16,0,64);
}; 
void define_class_CLS_10_double_int() { 
	 define_generic_class_name<double_int>("double_int");
	 define_generic_field (&double_int::low,"low",0,0,0,64);
	 define_generic_field (&double_int::high,"high",0,0,64,64);
}; 
void define_class_CLS_11_tree_int_cst() { 
	 define_generic_class_name<tree_int_cst>("tree_int_cst");
	 define_generic_field (&tree_int_cst::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_int_cst::int_cst,"int_cst",0,16,0,128);
}; 
void define_class_CLS_12_tree_real_cst() { 
	 define_generic_class_name<tree_real_cst>("tree_real_cst");
	 define_generic_field (&tree_real_cst::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_real_cst::real_cst_ptr,"real_cst_ptr",0,16,0,64);
}; 
void define_class_CLS_13_tree_fixed_cst() { 
	 define_generic_class_name<tree_fixed_cst>("tree_fixed_cst");
	 define_generic_field (&tree_fixed_cst::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_fixed_cst::fixed_cst_ptr,"fixed_cst_ptr",0,16,0,64);
}; 
void define_class_CLS_14_tree_string() { 
	 define_generic_class_name<tree_string>("tree_string");
	 define_generic_field (&tree_string::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_string::length,"length",0,16,0,32);
	 define_generic_field (&tree_string::str,"str",0,16,32,8);
}; 
void define_class_CLS_15_tree_complex() { 
	 define_generic_class_name<tree_complex>("tree_complex");
	 define_generic_field (&tree_complex::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_complex::real,"real",0,16,0,64);
	 define_generic_field (&tree_complex::imag,"imag",0,16,64,64);
}; 
void define_class_CLS_16_tree_vector() { 
	 define_generic_class_name<tree_vector>("tree_vector");
	 define_generic_field (&tree_vector::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_vector::elts,"elts",0,16,0,64);
}; 
void define_class_CLS_17_tree_identifier() { 
	 define_generic_class_name<tree_identifier>("tree_identifier");
	 define_generic_field (&tree_identifier::common,"common",0,0,0,192);
	 define_generic_field (&tree_identifier::id,"id",0,16,64,128);
}; 
void define_class_CLS_18_tree_list() { 
	 define_generic_class_name<tree_list>("tree_list");
	 define_generic_field (&tree_list::common,"common",0,0,0,192);
	 define_generic_field (&tree_list::purpose,"purpose",0,16,64,64);
	 define_generic_field (&tree_list::value,"value",0,32,0,64);
}; 
void define_class_CLS_19_tree_vec() { 
	 define_generic_class_name<tree_vec>("tree_vec");
	 define_generic_field (&tree_vec::common,"common",0,0,0,192);
	 define_generic_field (&tree_vec::a,"a",0,16,64,64);
}; 
void define_class_CLS_20_constructor_elt() { 
	 define_generic_class_name<constructor_elt>("constructor_elt");
	 define_generic_field (&constructor_elt::index,"index",0,0,0,64);
	 define_generic_field (&constructor_elt::value,"value",0,0,64,64);
}; 
void define_class_CLS_21_tree_constructor() { 
	 define_generic_class_name<tree_constructor>("tree_constructor");
	 define_generic_field (&tree_constructor::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_constructor::elts,"elts",0,16,0,64);
}; 
void define_class_CLS_22_tree_exp() { 
	 define_generic_class_name<tree_exp>("tree_exp");
	 define_generic_field (&tree_exp::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_exp::locus,"locus",0,16,0,32);
	 define_generic_field (&tree_exp::operands,"operands",0,16,64,64);
}; 
void define_class_CLS_23_ssa_use_operand_t() { 
	 define_generic_class_name<ssa_use_operand_t>("ssa_use_operand_t");
	 define_generic_field (&ssa_use_operand_t::prev,"prev",0,0,0,64);
	 define_generic_field (&ssa_use_operand_t::next,"next",0,0,64,64);
	 define_generic_field (&ssa_use_operand_t::loc,"loc",0,16,0,64);
	 define_generic_field (&ssa_use_operand_t::use,"use",0,16,64,64);
}; 
void define_class_CLS_24_tree_ssa_name() { 
	 define_generic_class_name<tree_ssa_name>("tree_ssa_name");
	 define_generic_field (&tree_ssa_name::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_ssa_name::var,"var",0,16,0,64);
	 define_generic_field (&tree_ssa_name::def_stmt,"def_stmt",0,16,64,64);
	 define_generic_field (&tree_ssa_name::info,"info",0,32,0,64);
	 define_generic_field (&tree_ssa_name::imm_uses,"imm_uses",0,32,64,256);
}; 
void define_class_CLS_25_phi_arg_d() { 
	 define_generic_class_name<phi_arg_d>("phi_arg_d");
	 define_generic_field (&phi_arg_d::imm_use,"imm_use",0,0,0,256);
	 define_generic_field (&phi_arg_d::def,"def",0,32,0,64);
	 define_generic_field (&phi_arg_d::locus,"locus",0,32,64,32);
}; 
void define_class_CLS_26_tree_omp_clause() { 
	 define_generic_class_name<tree_omp_clause>("tree_omp_clause");
	 define_generic_field (&tree_omp_clause::common,"common",0,0,0,192);
	 define_generic_field (&tree_omp_clause::locus,"locus",0,16,64,32);
	 define_generic_field (&tree_omp_clause::code,"code",0,16,96,32);
	 define_generic_field (&tree_omp_clause::subcode,"subcode",0,32,0,32);
	 define_generic_field (&tree_omp_clause::gimple_reduction_init,"gimple_reduction_init",0,32,64,64);
	 define_generic_field (&tree_omp_clause::gimple_reduction_merge,"gimple_reduction_merge",0,48,0,64);
	 define_generic_field (&tree_omp_clause::ops,"ops",0,48,64,64);
}; 
void define_class_CLS_27_tree_block() { 
	 define_generic_class_name<tree_block>("tree_block");
	 define_generic_field (&tree_block::base,"base",0,0,0,64);
	 define_generic_field (&tree_block::chain,"chain",0,0,64,64);
	 define_generic_bitfield<tree_block>("abstract_flag",1,16,0,1);
	 define_generic_bitfield<tree_block>("block_num",1,16,1,31);
	 define_generic_field (&tree_block::locus,"locus",0,16,32,32);
	 define_generic_field (&tree_block::vars,"vars",0,16,64,64);
	 define_generic_field (&tree_block::nonlocalized_vars,"nonlocalized_vars",0,32,0,64);
	 define_generic_field (&tree_block::subblocks,"subblocks",0,32,64,64);
	 define_generic_field (&tree_block::supercontext,"supercontext",0,48,0,64);
	 define_generic_field (&tree_block::abstract_origin,"abstract_origin",0,48,64,64);
	 define_generic_field (&tree_block::fragment_origin,"fragment_origin",0,64,0,64);
	 define_generic_field (&tree_block::fragment_chain,"fragment_chain",0,64,64,64);
}; 
void define_class_CLS_28_tree_type_common() { 
	 define_generic_class_name<tree_type_common>("tree_type_common");
	 define_generic_field (&tree_type_common::common,"common",0,0,0,192);
	 define_generic_field (&tree_type_common::size,"size",0,16,64,64);
	 define_generic_field (&tree_type_common::size_unit,"size_unit",0,32,0,64);
	 define_generic_field (&tree_type_common::attributes,"attributes",0,32,64,64);
	 define_generic_field (&tree_type_common::uid,"uid",0,48,0,32);
	 define_generic_bitfield<tree_type_common>("precision",1,48,32,10);
	 define_generic_bitfield<tree_type_common>("no_force_blk_flag",1,48,42,1);
	 define_generic_bitfield<tree_type_common>("needs_constructing_flag",1,48,43,1);
	 define_generic_bitfield<tree_type_common>("transparent_aggr_flag",1,48,44,1);
	 define_generic_bitfield<tree_type_common>("restrict_flag",1,48,45,1);
	 define_generic_bitfield<tree_type_common>("contains_placeholder_bits",1,48,46,2);
	 define_generic_bitfield<tree_type_common>("mode",1,48,48,8);
	 define_generic_bitfield<tree_type_common>("string_flag",1,48,56,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_0",1,48,57,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_1",1,48,58,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_2",1,48,59,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_3",1,48,60,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_4",1,48,61,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_5",1,48,62,1);
	 define_generic_bitfield<tree_type_common>("lang_flag_6",1,48,63,1);
	 define_generic_field (&tree_type_common::align,"align",0,48,64,32);
	 define_generic_field (&tree_type_common::alias_set,"alias_set",0,48,96,32);
	 define_generic_field (&tree_type_common::pointer_to,"pointer_to",0,64,0,64);
	 define_generic_field (&tree_type_common::reference_to,"reference_to",0,64,64,64);
	 define_generic_field (&tree_type_common::symtab,"symtab",0,80,0,64);
	 define_generic_field (&tree_type_common::canonical,"canonical",0,80,64,64);
	 define_generic_field (&tree_type_common::next_variant,"next_variant",0,96,0,64);
	 define_generic_field (&tree_type_common::main_variant,"main_variant",0,96,64,64);
	 define_generic_field (&tree_type_common::context,"context",0,112,0,64);
	 define_generic_field (&tree_type_common::name,"name",0,112,64,64);
}; 
void define_class_CLS_29_tree_type_with_lang_specific() { 
	 define_generic_class_name<tree_type_with_lang_specific>("tree_type_with_lang_specific");
	 define_generic_field (&tree_type_with_lang_specific::common,"common",0,0,0,1024);
	 define_generic_field (&tree_type_with_lang_specific::lang_specific,"lang_specific",0,128,0,64);
}; 
void define_class_CLS_30_tree_type_non_common() { 
	 define_generic_class_name<tree_type_non_common>("tree_type_non_common");
	 define_generic_field (&tree_type_non_common::with_lang_specific,"with_lang_specific",0,0,0,1088);
	 define_generic_field (&tree_type_non_common::values,"values",0,128,64,64);
	 define_generic_field (&tree_type_non_common::minval,"minval",0,144,0,64);
	 define_generic_field (&tree_type_non_common::maxval,"maxval",0,144,64,64);
	 define_generic_field (&tree_type_non_common::binfo,"binfo",0,160,0,64);
}; 
void define_class_CLS_31_tree_binfo() { 
	 define_generic_class_name<tree_binfo>("tree_binfo");
	 define_generic_field (&tree_binfo::common,"common",0,0,0,192);
	 define_generic_field (&tree_binfo::offset,"offset",0,16,64,64);
	 define_generic_field (&tree_binfo::vtable,"vtable",0,32,0,64);
	 define_generic_field (&tree_binfo::virtuals,"virtuals",0,32,64,64);
	 define_generic_field (&tree_binfo::vptr_field,"vptr_field",0,48,0,64);
	 define_generic_field (&tree_binfo::base_accesses,"base_accesses",0,48,64,64);
	 define_generic_field (&tree_binfo::inheritance,"inheritance",0,64,0,64);
	 define_generic_field (&tree_binfo::vtt_subvtt,"vtt_subvtt",0,64,64,64);
	 define_generic_field (&tree_binfo::vtt_vptr,"vtt_vptr",0,80,0,64);
	 define_generic_field (&tree_binfo::base_binfos,"base_binfos",0,80,64,8);
}; 
void define_class_CLS_32_tree_decl_minimal() { 
	 define_generic_class_name<tree_decl_minimal>("tree_decl_minimal");
	 define_generic_field (&tree_decl_minimal::common,"common",0,0,0,192);
	 define_generic_field (&tree_decl_minimal::locus,"locus",0,16,64,32);
	 define_generic_field (&tree_decl_minimal::uid,"uid",0,16,96,32);
	 define_generic_field (&tree_decl_minimal::name,"name",0,32,0,64);
	 define_generic_field (&tree_decl_minimal::context,"context",0,32,64,64);
}; 
void define_class_CLS_33_tree_decl_common() { 
	 define_generic_class_name<tree_decl_common>("tree_decl_common");
	 define_generic_field (&tree_decl_common::common,"common",0,0,0,384);
	 define_generic_field (&tree_decl_common::size,"size",0,48,0,64);
	 define_generic_bitfield<tree_decl_common>("mode",1,48,64,8);
	 define_generic_bitfield<tree_decl_common>("nonlocal_flag",1,48,72,1);
	 define_generic_bitfield<tree_decl_common>("virtual_flag",1,48,73,1);
	 define_generic_bitfield<tree_decl_common>("ignored_flag",1,48,74,1);
	 define_generic_bitfield<tree_decl_common>("abstract_flag",1,48,75,1);
	 define_generic_bitfield<tree_decl_common>("artificial_flag",1,48,76,1);
	 define_generic_bitfield<tree_decl_common>("preserve_flag",1,48,77,1);
	 define_generic_bitfield<tree_decl_common>("debug_expr_is_from",1,48,78,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_0",1,48,79,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_1",1,48,80,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_2",1,48,81,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_3",1,48,82,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_4",1,48,83,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_5",1,48,84,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_6",1,48,85,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_7",1,48,86,1);
	 define_generic_bitfield<tree_decl_common>("lang_flag_8",1,48,87,1);
	 define_generic_bitfield<tree_decl_common>("decl_flag_0",1,48,88,1);
	 define_generic_bitfield<tree_decl_common>("decl_flag_1",1,48,89,1);
	 define_generic_bitfield<tree_decl_common>("decl_flag_2",1,48,90,1);
	 define_generic_bitfield<tree_decl_common>("decl_flag_3",1,48,91,1);
	 define_generic_bitfield<tree_decl_common>("gimple_reg_flag",1,48,92,1);
	 define_generic_bitfield<tree_decl_common>("decl_by_reference_flag",1,48,93,1);
	 define_generic_bitfield<tree_decl_common>("decl_read_flag",1,48,94,1);
	 define_generic_bitfield<tree_decl_common>("decl_nonshareable_flag",1,48,95,1);
	 define_generic_bitfield<tree_decl_common>("off_align",1,48,96,8);
	 define_generic_field (&tree_decl_common::align,"align",0,64,0,32);
	 define_generic_field (&tree_decl_common::pt_uid,"pt_uid",0,64,32,32);
	 define_generic_field (&tree_decl_common::size_unit,"size_unit",0,64,64,64);
	 define_generic_field (&tree_decl_common::initial,"initial",0,80,0,64);
	 define_generic_field (&tree_decl_common::attributes,"attributes",0,80,64,64);
	 define_generic_field (&tree_decl_common::abstract_origin,"abstract_origin",0,96,0,64);
	 define_generic_field (&tree_decl_common::lang_specific,"lang_specific",0,96,64,64);
}; 
void define_class_CLS_34_tree_decl_with_rtl() { 
	 define_generic_class_name<tree_decl_with_rtl>("tree_decl_with_rtl");
	 define_generic_field (&tree_decl_with_rtl::common,"common",0,0,0,896);
	 define_generic_field (&tree_decl_with_rtl::rtl,"rtl",0,112,0,64);
}; 
void define_class_CLS_35_tree_field_decl() { 
	 define_generic_class_name<tree_field_decl>("tree_field_decl");
	 define_generic_field (&tree_field_decl::common,"common",0,0,0,896);
	 define_generic_field (&tree_field_decl::offset,"offset",0,112,0,64);
	 define_generic_field (&tree_field_decl::bit_field_type,"bit_field_type",0,112,64,64);
	 define_generic_field (&tree_field_decl::qualifier,"qualifier",0,128,0,64);
	 define_generic_field (&tree_field_decl::bit_offset,"bit_offset",0,128,64,64);
	 define_generic_field (&tree_field_decl::fcontext,"fcontext",0,144,0,64);
}; 
void define_class_CLS_36_tree_label_decl() { 
	 define_generic_class_name<tree_label_decl>("tree_label_decl");
	 define_generic_field (&tree_label_decl::common,"common",0,0,0,960);
	 define_generic_field (&tree_label_decl::label_decl_uid,"label_decl_uid",0,112,64,32);
	 define_generic_field (&tree_label_decl::eh_landing_pad_nr,"eh_landing_pad_nr",0,112,96,32);
}; 
void define_class_CLS_37_tree_result_decl() { 
	 define_generic_class_name<tree_result_decl>("tree_result_decl");
	 define_generic_field (&tree_result_decl::common,"common",0,0,0,960);
}; 
void define_class_CLS_38_tree_const_decl() { 
	 define_generic_class_name<tree_const_decl>("tree_const_decl");
	 define_generic_field (&tree_const_decl::common,"common",0,0,0,896);
}; 
void define_class_CLS_39_tree_parm_decl() { 
	 define_generic_class_name<tree_parm_decl>("tree_parm_decl");
	 define_generic_field (&tree_parm_decl::common,"common",0,0,0,960);
	 define_generic_field (&tree_parm_decl::incoming_rtl,"incoming_rtl",0,112,64,64);
}; 
void define_class_CLS_40_tree_decl_with_vis() { 
	 define_generic_class_name<tree_decl_with_vis>("tree_decl_with_vis");
	 define_generic_field (&tree_decl_with_vis::common,"common",0,0,0,960);
	 define_generic_field (&tree_decl_with_vis::assembler_name,"assembler_name",0,112,64,64);
	 define_generic_field (&tree_decl_with_vis::section_name,"section_name",0,128,0,64);
	 define_generic_field (&tree_decl_with_vis::comdat_group,"comdat_group",0,128,64,64);
	 define_generic_bitfield<tree_decl_with_vis>("defer_output",1,144,0,1);
	 define_generic_bitfield<tree_decl_with_vis>("hard_register",1,144,1,1);
	 define_generic_bitfield<tree_decl_with_vis>("common_flag",1,144,2,1);
	 define_generic_bitfield<tree_decl_with_vis>("in_text_section",1,144,3,1);
	 define_generic_bitfield<tree_decl_with_vis>("in_constant_pool",1,144,4,1);
	 define_generic_bitfield<tree_decl_with_vis>("dllimport_flag",1,144,5,1);
	 define_generic_bitfield<tree_decl_with_vis>("weak_flag",1,144,6,1);
	 define_generic_bitfield<tree_decl_with_vis>("implicit_section_name_p",1,144,7,1);
	 define_generic_bitfield<tree_decl_with_vis>("seen_in_bind_expr",1,144,8,1);
	 define_generic_bitfield<tree_decl_with_vis>("comdat_flag",1,144,9,1);
	 define_generic_bitfield<tree_decl_with_vis>("visibility",1,144,10,2);
	 define_generic_bitfield<tree_decl_with_vis>("visibility_specified",1,144,12,1);
	 define_generic_bitfield<tree_decl_with_vis>("tls_model",1,144,13,3);
	 define_generic_bitfield<tree_decl_with_vis>("init_priority_p",1,144,16,1);
	 define_generic_bitfield<tree_decl_with_vis>("shadowed_for_var_p",1,144,17,1);
	 define_generic_bitfield<tree_decl_with_vis>("cxx_constructor",1,144,18,1);
	 define_generic_bitfield<tree_decl_with_vis>("cxx_destructor",1,144,19,1);
	 define_generic_bitfield<tree_decl_with_vis>("final",1,144,20,1);
}; 
void define_class_CLS_41_tree_var_decl() { 
	 define_generic_class_name<tree_var_decl>("tree_var_decl");
	 define_generic_field (&tree_var_decl::common,"common",0,0,0,1216);
}; 
void define_class_CLS_42_tree_decl_non_common() { 
	 define_generic_class_name<tree_decl_non_common>("tree_decl_non_common");
	 define_generic_field (&tree_decl_non_common::common,"common",0,0,0,1216);
	 define_generic_field (&tree_decl_non_common::saved_tree,"saved_tree",0,144,64,64);
	 define_generic_field (&tree_decl_non_common::arguments,"arguments",0,160,0,64);
	 define_generic_field (&tree_decl_non_common::result,"result",0,160,64,64);
	 define_generic_field (&tree_decl_non_common::vindex,"vindex",0,176,0,64);
}; 
void define_class_CLS_43_tree_function_decl() { 
	 define_generic_class_name<tree_function_decl>("tree_function_decl");
	 define_generic_field (&tree_function_decl::common,"common",0,0,0,1472);
	 define_generic_field (&tree_function_decl::f,"f",0,176,64,64);
	 define_generic_field (&tree_function_decl::personality,"personality",0,192,0,64);
	 define_generic_field (&tree_function_decl::function_specific_target,"function_specific_target",0,192,64,64);
	 define_generic_field (&tree_function_decl::function_specific_optimization,"function_specific_optimization",0,208,0,64);
	 define_generic_bitfield<tree_function_decl>("function_code",1,208,64,11);
	 define_generic_bitfield<tree_function_decl>("built_in_class",1,208,75,2);
	 define_generic_bitfield<tree_function_decl>("static_ctor_flag",1,208,77,1);
	 define_generic_bitfield<tree_function_decl>("static_dtor_flag",1,208,78,1);
	 define_generic_bitfield<tree_function_decl>("uninlinable",1,208,79,1);
	 define_generic_bitfield<tree_function_decl>("possibly_inlined",1,208,80,1);
	 define_generic_bitfield<tree_function_decl>("novops_flag",1,208,81,1);
	 define_generic_bitfield<tree_function_decl>("returns_twice_flag",1,208,82,1);
	 define_generic_bitfield<tree_function_decl>("malloc_flag",1,208,83,1);
	 define_generic_bitfield<tree_function_decl>("operator_new_flag",1,208,84,1);
	 define_generic_bitfield<tree_function_decl>("declared_inline_flag",1,208,85,1);
	 define_generic_bitfield<tree_function_decl>("regdecl_flag",1,208,86,1);
	 define_generic_bitfield<tree_function_decl>("no_inline_warning_flag",1,208,87,1);
	 define_generic_bitfield<tree_function_decl>("no_instrument_function_entry_exit",1,208,88,1);
	 define_generic_bitfield<tree_function_decl>("no_limit_stack",1,208,89,1);
	 define_generic_bitfield<tree_function_decl>("disregard_inline_limits",1,208,90,1);
	 define_generic_bitfield<tree_function_decl>("pure_flag",1,208,91,1);
	 define_generic_bitfield<tree_function_decl>("looping_const_or_pure_flag",1,208,92,1);
	 define_generic_bitfield<tree_function_decl>("has_debug_args_flag",1,208,93,1);
	 define_generic_bitfield<tree_function_decl>("tm_clone_flag",1,208,94,1);
	 define_generic_bitfield<tree_function_decl>("versioned_function",1,208,95,1);
}; 
void define_class_CLS_44_tree_translation_unit_decl() { 
	 define_generic_class_name<tree_translation_unit_decl>("tree_translation_unit_decl");
	 define_generic_field (&tree_translation_unit_decl::common,"common",0,0,0,896);
	 define_generic_field (&tree_translation_unit_decl::language,"language",0,112,0,64);
}; 
void define_class_CLS_45_tree_type_decl() { 
	 define_generic_class_name<tree_type_decl>("tree_type_decl");
	 define_generic_field (&tree_type_decl::common,"common",0,0,0,1472);
}; 
void define_class_CLS_46_tree_statement_list_node() { 
	 define_generic_class_name<tree_statement_list_node>("tree_statement_list_node");
	 define_generic_field (&tree_statement_list_node::prev,"prev",0,0,0,64);
	 define_generic_field (&tree_statement_list_node::next,"next",0,0,64,64);
	 define_generic_field (&tree_statement_list_node::stmt,"stmt",0,16,0,64);
}; 
void define_class_CLS_47_tree_statement_list() { 
	 define_generic_class_name<tree_statement_list>("tree_statement_list");
	 define_generic_field (&tree_statement_list::typed,"typed",0,0,0,128);
	 define_generic_field (&tree_statement_list::head,"head",0,16,0,64);
	 define_generic_field (&tree_statement_list::tail,"tail",0,16,64,64);
}; 
void define_class_CLS_48_cl_optimization() { 
	 define_generic_class_name<cl_optimization>("cl_optimization");
	 define_generic_field (&cl_optimization::x_align_functions,"x_align_functions",0,0,0,32);
	 define_generic_field (&cl_optimization::x_align_jumps,"x_align_jumps",0,0,32,32);
	 define_generic_field (&cl_optimization::x_align_labels,"x_align_labels",0,0,64,32);
	 define_generic_field (&cl_optimization::x_align_loops,"x_align_loops",0,0,96,32);
	 define_generic_field (&cl_optimization::x_flag_sched_stalled_insns,"x_flag_sched_stalled_insns",0,16,0,32);
	 define_generic_field (&cl_optimization::x_flag_sched_stalled_insns_dep,"x_flag_sched_stalled_insns_dep",0,16,32,32);
	 define_generic_field (&cl_optimization::x_flag_fp_contract_mode,"x_flag_fp_contract_mode",0,16,64,32);
	 define_generic_field (&cl_optimization::x_optimize,"x_optimize",0,16,96,8);
	 define_generic_field (&cl_optimization::x_optimize_size,"x_optimize_size",0,16,104,8);
	 define_generic_field (&cl_optimization::x_flag_aggressive_loop_optimizations,"x_flag_aggressive_loop_optimizations",0,16,112,8);
	 define_generic_field (&cl_optimization::x_flag_asynchronous_unwind_tables,"x_flag_asynchronous_unwind_tables",0,16,120,8);
	 define_generic_field (&cl_optimization::x_flag_branch_on_count_reg,"x_flag_branch_on_count_reg",0,32,0,8);
	 define_generic_field (&cl_optimization::x_flag_branch_probabilities,"x_flag_branch_probabilities",0,32,8,8);
	 define_generic_field (&cl_optimization::x_flag_branch_target_load_optimize,"x_flag_branch_target_load_optimize",0,32,16,8);
	 define_generic_field (&cl_optimization::x_flag_branch_target_load_optimize2,"x_flag_branch_target_load_optimize2",0,32,24,8);
	 define_generic_field (&cl_optimization::x_flag_btr_bb_exclusive,"x_flag_btr_bb_exclusive",0,32,32,8);
	 define_generic_field (&cl_optimization::x_flag_caller_saves,"x_flag_caller_saves",0,32,40,8);
	 define_generic_field (&cl_optimization::x_flag_combine_stack_adjustments,"x_flag_combine_stack_adjustments",0,32,48,8);
	 define_generic_field (&cl_optimization::x_flag_no_common,"x_flag_no_common",0,32,56,8);
	 define_generic_field (&cl_optimization::x_flag_compare_elim_after_reload,"x_flag_compare_elim_after_reload",0,32,64,8);
	 define_generic_field (&cl_optimization::x_flag_conserve_stack,"x_flag_conserve_stack",0,32,72,8);
	 define_generic_field (&cl_optimization::x_flag_cprop_registers,"x_flag_cprop_registers",0,32,80,8);
	 define_generic_field (&cl_optimization::x_flag_crossjumping,"x_flag_crossjumping",0,32,88,8);
	 define_generic_field (&cl_optimization::x_flag_cse_follow_jumps,"x_flag_cse_follow_jumps",0,32,96,8);
	 define_generic_field (&cl_optimization::x_flag_cx_fortran_rules,"x_flag_cx_fortran_rules",0,32,104,8);
	 define_generic_field (&cl_optimization::x_flag_cx_limited_range,"x_flag_cx_limited_range",0,32,112,8);
	 define_generic_field (&cl_optimization::x_flag_data_sections,"x_flag_data_sections",0,32,120,8);
	 define_generic_field (&cl_optimization::x_flag_dce,"x_flag_dce",0,48,0,8);
	 define_generic_field (&cl_optimization::x_flag_defer_pop,"x_flag_defer_pop",0,48,8,8);
	 define_generic_field (&cl_optimization::x_flag_delayed_branch,"x_flag_delayed_branch",0,48,16,8);
	 define_generic_field (&cl_optimization::x_flag_delete_null_pointer_checks,"x_flag_delete_null_pointer_checks",0,48,24,8);
	 define_generic_field (&cl_optimization::x_flag_devirtualize,"x_flag_devirtualize",0,48,32,8);
	 define_generic_field (&cl_optimization::x_flag_devirtualize_speculatively,"x_flag_devirtualize_speculatively",0,48,40,8);
	 define_generic_field (&cl_optimization::x_flag_dse,"x_flag_dse",0,48,48,8);
	 define_generic_field (&cl_optimization::x_flag_early_inlining,"x_flag_early_inlining",0,48,56,8);
	 define_generic_field (&cl_optimization::x_flag_exceptions,"x_flag_exceptions",0,48,64,8);
	 define_generic_field (&cl_optimization::x_flag_expensive_optimizations,"x_flag_expensive_optimizations",0,48,72,8);
	 define_generic_field (&cl_optimization::x_flag_finite_math_only,"x_flag_finite_math_only",0,48,80,8);
	 define_generic_field (&cl_optimization::x_flag_float_store,"x_flag_float_store",0,48,88,8);
	 define_generic_field (&cl_optimization::x_flag_forward_propagate,"x_flag_forward_propagate",0,48,96,8);
	 define_generic_field (&cl_optimization::x_flag_gcse,"x_flag_gcse",0,48,104,8);
	 define_generic_field (&cl_optimization::x_flag_gcse_after_reload,"x_flag_gcse_after_reload",0,48,112,8);
	 define_generic_field (&cl_optimization::x_flag_gcse_las,"x_flag_gcse_las",0,48,120,8);
	 define_generic_field (&cl_optimization::x_flag_gcse_lm,"x_flag_gcse_lm",0,64,0,8);
	 define_generic_field (&cl_optimization::x_flag_gcse_sm,"x_flag_gcse_sm",0,64,8,8);
	 define_generic_field (&cl_optimization::x_flag_graphite_identity,"x_flag_graphite_identity",0,64,16,8);
	 define_generic_field (&cl_optimization::x_flag_guess_branch_prob,"x_flag_guess_branch_prob",0,64,24,8);
	 define_generic_field (&cl_optimization::x_flag_hoist_adjacent_loads,"x_flag_hoist_adjacent_loads",0,64,32,8);
	 define_generic_field (&cl_optimization::x_flag_if_conversion,"x_flag_if_conversion",0,64,40,8);
	 define_generic_field (&cl_optimization::x_flag_if_conversion2,"x_flag_if_conversion2",0,64,48,8);
	 define_generic_field (&cl_optimization::x_flag_no_inline,"x_flag_no_inline",0,64,56,8);
	 define_generic_field (&cl_optimization::x_flag_inline_atomics,"x_flag_inline_atomics",0,64,64,8);
	 define_generic_field (&cl_optimization::x_flag_inline_functions,"x_flag_inline_functions",0,64,72,8);
	 define_generic_field (&cl_optimization::x_flag_inline_functions_called_once,"x_flag_inline_functions_called_once",0,64,80,8);
	 define_generic_field (&cl_optimization::x_flag_inline_small_functions,"x_flag_inline_small_functions",0,64,88,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_cp,"x_flag_ipa_cp",0,64,96,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_cp_clone,"x_flag_ipa_cp_clone",0,64,104,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_profile,"x_flag_ipa_profile",0,64,112,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_pta,"x_flag_ipa_pta",0,64,120,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_pure_const,"x_flag_ipa_pure_const",0,80,0,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_reference,"x_flag_ipa_reference",0,80,8,8);
	 define_generic_field (&cl_optimization::x_flag_ipa_sra,"x_flag_ipa_sra",0,80,16,8);
	 define_generic_field (&cl_optimization::x_flag_ira_hoist_pressure,"x_flag_ira_hoist_pressure",0,80,24,8);
	 define_generic_field (&cl_optimization::x_flag_ira_loop_pressure,"x_flag_ira_loop_pressure",0,80,32,8);
	 define_generic_field (&cl_optimization::x_flag_isolate_erroneous_paths_attribute,"x_flag_isolate_erroneous_paths_attribute",0,80,40,8);
	 define_generic_field (&cl_optimization::x_flag_isolate_erroneous_paths_dereference,"x_flag_isolate_erroneous_paths_dereference",0,80,48,8);
	 define_generic_field (&cl_optimization::x_flag_ivopts,"x_flag_ivopts",0,80,56,8);
	 define_generic_field (&cl_optimization::x_flag_jump_tables,"x_flag_jump_tables",0,80,64,8);
	 define_generic_field (&cl_optimization::x_flag_lifetime_dse,"x_flag_lifetime_dse",0,80,72,8);
	 define_generic_field (&cl_optimization::x_flag_live_range_shrinkage,"x_flag_live_range_shrinkage",0,80,80,8);
	 define_generic_field (&cl_optimization::x_flag_loop_block,"x_flag_loop_block",0,80,88,8);
	 define_generic_field (&cl_optimization::x_flag_loop_interchange,"x_flag_loop_interchange",0,80,96,8);
	 define_generic_field (&cl_optimization::x_flag_loop_optimize_isl,"x_flag_loop_optimize_isl",0,80,104,8);
	 define_generic_field (&cl_optimization::x_flag_loop_parallelize_all,"x_flag_loop_parallelize_all",0,80,112,8);
	 define_generic_field (&cl_optimization::x_flag_loop_strip_mine,"x_flag_loop_strip_mine",0,80,120,8);
	 define_generic_field (&cl_optimization::x_flag_errno_math,"x_flag_errno_math",0,96,0,8);
	 define_generic_field (&cl_optimization::x_flag_merge_constants,"x_flag_merge_constants",0,96,8,8);
	 define_generic_field (&cl_optimization::x_flag_modulo_sched,"x_flag_modulo_sched",0,96,16,8);
	 define_generic_field (&cl_optimization::x_flag_move_loop_invariants,"x_flag_move_loop_invariants",0,96,24,8);
	 define_generic_field (&cl_optimization::x_flag_non_call_exceptions,"x_flag_non_call_exceptions",0,96,32,8);
	 define_generic_field (&cl_optimization::x_flag_nothrow_opt,"x_flag_nothrow_opt",0,96,40,8);
	 define_generic_field (&cl_optimization::x_flag_omit_frame_pointer,"x_flag_omit_frame_pointer",0,96,48,8);
	 define_generic_field (&cl_optimization::x_flag_opt_info,"x_flag_opt_info",0,96,56,8);
	 define_generic_field (&cl_optimization::x_flag_optimize_sibling_calls,"x_flag_optimize_sibling_calls",0,96,64,8);
	 define_generic_field (&cl_optimization::x_flag_optimize_strlen,"x_flag_optimize_strlen",0,96,72,8);
	 define_generic_field (&cl_optimization::x_flag_pack_struct,"x_flag_pack_struct",0,96,80,8);
	 define_generic_field (&cl_optimization::x_flag_peel_loops,"x_flag_peel_loops",0,96,88,8);
	 define_generic_field (&cl_optimization::x_flag_no_peephole,"x_flag_no_peephole",0,96,96,8);
	 define_generic_field (&cl_optimization::x_flag_peephole2,"x_flag_peephole2",0,96,104,8);
	 define_generic_field (&cl_optimization::x_flag_predictive_commoning,"x_flag_predictive_commoning",0,96,112,8);
	 define_generic_field (&cl_optimization::x_flag_prefetch_loop_arrays,"x_flag_prefetch_loop_arrays",0,96,120,8);
	 define_generic_field (&cl_optimization::x_flag_pcc_struct_return,"x_flag_pcc_struct_return",0,112,0,8);
	 define_generic_field (&cl_optimization::x_flag_rename_registers,"x_flag_rename_registers",0,112,8,8);
	 define_generic_field (&cl_optimization::x_flag_reorder_blocks,"x_flag_reorder_blocks",0,112,16,8);
	 define_generic_field (&cl_optimization::x_flag_reorder_blocks_and_partition,"x_flag_reorder_blocks_and_partition",0,112,24,8);
	 define_generic_field (&cl_optimization::x_flag_reorder_functions,"x_flag_reorder_functions",0,112,32,8);
	 define_generic_field (&cl_optimization::x_flag_rerun_cse_after_loop,"x_flag_rerun_cse_after_loop",0,112,40,8);
	 define_generic_field (&cl_optimization::x_flag_resched_modulo_sched,"x_flag_resched_modulo_sched",0,112,48,8);
	 define_generic_field (&cl_optimization::x_flag_rounding_math,"x_flag_rounding_math",0,112,56,8);
	 define_generic_field (&cl_optimization::x_flag_rtti,"x_flag_rtti",0,112,64,8);
	 define_generic_field (&cl_optimization::x_flag_sched_critical_path_heuristic,"x_flag_sched_critical_path_heuristic",0,112,72,8);
	 define_generic_field (&cl_optimization::x_flag_sched_dep_count_heuristic,"x_flag_sched_dep_count_heuristic",0,112,80,8);
	 define_generic_field (&cl_optimization::x_flag_sched_group_heuristic,"x_flag_sched_group_heuristic",0,112,88,8);
	 define_generic_field (&cl_optimization::x_flag_schedule_interblock,"x_flag_schedule_interblock",0,112,96,8);
	 define_generic_field (&cl_optimization::x_flag_sched_last_insn_heuristic,"x_flag_sched_last_insn_heuristic",0,112,104,8);
	 define_generic_field (&cl_optimization::x_flag_sched_pressure,"x_flag_sched_pressure",0,112,112,8);
	 define_generic_field (&cl_optimization::x_flag_sched_rank_heuristic,"x_flag_sched_rank_heuristic",0,112,120,8);
	 define_generic_field (&cl_optimization::x_flag_schedule_speculative,"x_flag_schedule_speculative",0,128,0,8);
	 define_generic_field (&cl_optimization::x_flag_sched_spec_insn_heuristic,"x_flag_sched_spec_insn_heuristic",0,128,8,8);
	 define_generic_field (&cl_optimization::x_flag_schedule_speculative_load,"x_flag_schedule_speculative_load",0,128,16,8);
	 define_generic_field (&cl_optimization::x_flag_schedule_speculative_load_dangerous,"x_flag_schedule_speculative_load_dangerous",0,128,24,8);
	 define_generic_field (&cl_optimization::x_flag_sched2_use_superblocks,"x_flag_sched2_use_superblocks",0,128,32,8);
	 define_generic_field (&cl_optimization::x_flag_schedule_insns,"x_flag_schedule_insns",0,128,40,8);
	 define_generic_field (&cl_optimization::x_flag_schedule_insns_after_reload,"x_flag_schedule_insns_after_reload",0,128,48,8);
	 define_generic_field (&cl_optimization::x_flag_section_anchors,"x_flag_section_anchors",0,128,56,8);
	 define_generic_field (&cl_optimization::x_flag_sel_sched_pipelining,"x_flag_sel_sched_pipelining",0,128,64,8);
	 define_generic_field (&cl_optimization::x_flag_sel_sched_pipelining_outer_loops,"x_flag_sel_sched_pipelining_outer_loops",0,128,72,8);
	 define_generic_field (&cl_optimization::x_flag_sel_sched_reschedule_pipelined,"x_flag_sel_sched_reschedule_pipelined",0,128,80,8);
	 define_generic_field (&cl_optimization::x_flag_selective_scheduling,"x_flag_selective_scheduling",0,128,88,8);
	 define_generic_field (&cl_optimization::x_flag_selective_scheduling2,"x_flag_selective_scheduling2",0,128,96,8);
	 define_generic_field (&cl_optimization::x_flag_short_double,"x_flag_short_double",0,128,104,8);
	 define_generic_field (&cl_optimization::x_flag_short_enums,"x_flag_short_enums",0,128,112,8);
	 define_generic_field (&cl_optimization::x_flag_short_wchar,"x_flag_short_wchar",0,128,120,8);
	 define_generic_field (&cl_optimization::x_flag_shrink_wrap,"x_flag_shrink_wrap",0,144,0,8);
	 define_generic_field (&cl_optimization::x_flag_signaling_nans,"x_flag_signaling_nans",0,144,8,8);
	 define_generic_field (&cl_optimization::x_flag_signed_zeros,"x_flag_signed_zeros",0,144,16,8);
	 define_generic_field (&cl_optimization::x_flag_single_precision_constant,"x_flag_single_precision_constant",0,144,24,8);
	 define_generic_field (&cl_optimization::x_flag_split_ivs_in_unroller,"x_flag_split_ivs_in_unroller",0,144,32,8);
	 define_generic_field (&cl_optimization::x_flag_split_wide_types,"x_flag_split_wide_types",0,144,40,8);
	 define_generic_field (&cl_optimization::x_flag_strict_aliasing,"x_flag_strict_aliasing",0,144,48,8);
	 define_generic_field (&cl_optimization::x_flag_strict_enums,"x_flag_strict_enums",0,144,56,8);
	 define_generic_field (&cl_optimization::x_flag_thread_jumps,"x_flag_thread_jumps",0,144,64,8);
	 define_generic_field (&cl_optimization::x_flag_threadsafe_statics,"x_flag_threadsafe_statics",0,144,72,8);
	 define_generic_field (&cl_optimization::x_flag_toplevel_reorder,"x_flag_toplevel_reorder",0,144,80,8);
	 define_generic_field (&cl_optimization::x_flag_trapping_math,"x_flag_trapping_math",0,144,88,8);
	 define_generic_field (&cl_optimization::x_flag_trapv,"x_flag_trapv",0,144,96,8);
	 define_generic_field (&cl_optimization::x_flag_tree_bit_ccp,"x_flag_tree_bit_ccp",0,144,104,8);
	 define_generic_field (&cl_optimization::x_flag_tree_builtin_call_dce,"x_flag_tree_builtin_call_dce",0,144,112,8);
	 define_generic_field (&cl_optimization::x_flag_tree_ccp,"x_flag_tree_ccp",0,144,120,8);
	 define_generic_field (&cl_optimization::x_flag_tree_ch,"x_flag_tree_ch",0,160,0,8);
	 define_generic_field (&cl_optimization::x_flag_ssa_coalesce_vars,"x_flag_ssa_coalesce_vars",0,160,8,8);
	 define_generic_field (&cl_optimization::x_flag_tree_copy_prop,"x_flag_tree_copy_prop",0,160,16,8);
	 define_generic_field (&cl_optimization::x_flag_tree_copyrename,"x_flag_tree_copyrename",0,160,24,8);
	 define_generic_field (&cl_optimization::x_flag_tree_cselim,"x_flag_tree_cselim",0,160,32,8);
	 define_generic_field (&cl_optimization::x_flag_tree_dce,"x_flag_tree_dce",0,160,40,8);
	 define_generic_field (&cl_optimization::x_flag_tree_dom,"x_flag_tree_dom",0,160,48,8);
	 define_generic_field (&cl_optimization::x_flag_tree_dse,"x_flag_tree_dse",0,160,56,8);
	 define_generic_field (&cl_optimization::x_flag_tree_forwprop,"x_flag_tree_forwprop",0,160,64,8);
	 define_generic_field (&cl_optimization::x_flag_tree_fre,"x_flag_tree_fre",0,160,72,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_distribute_patterns,"x_flag_tree_loop_distribute_patterns",0,160,80,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_distribution,"x_flag_tree_loop_distribution",0,160,88,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_if_convert,"x_flag_tree_loop_if_convert",0,160,96,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_if_convert_stores,"x_flag_tree_loop_if_convert_stores",0,160,104,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_im,"x_flag_tree_loop_im",0,160,112,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_ivcanon,"x_flag_tree_loop_ivcanon",0,160,120,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_optimize,"x_flag_tree_loop_optimize",0,176,0,8);
	 define_generic_field (&cl_optimization::x_flag_tree_loop_vectorize,"x_flag_tree_loop_vectorize",0,176,8,8);
	 define_generic_field (&cl_optimization::x_flag_tree_live_range_split,"x_flag_tree_live_range_split",0,176,16,8);
	 define_generic_field (&cl_optimization::x_flag_tree_partial_pre,"x_flag_tree_partial_pre",0,176,24,8);
	 define_generic_field (&cl_optimization::x_flag_tree_phiprop,"x_flag_tree_phiprop",0,176,32,8);
	 define_generic_field (&cl_optimization::x_flag_tree_pre,"x_flag_tree_pre",0,176,40,8);
	 define_generic_field (&cl_optimization::x_flag_tree_pta,"x_flag_tree_pta",0,176,48,8);
	 define_generic_field (&cl_optimization::x_flag_tree_reassoc,"x_flag_tree_reassoc",0,176,56,8);
	 define_generic_field (&cl_optimization::x_flag_tree_scev_cprop,"x_flag_tree_scev_cprop",0,176,64,8);
	 define_generic_field (&cl_optimization::x_flag_tree_sink,"x_flag_tree_sink",0,176,72,8);
	 define_generic_field (&cl_optimization::x_flag_tree_slp_vectorize,"x_flag_tree_slp_vectorize",0,176,80,8);
	 define_generic_field (&cl_optimization::x_flag_tree_slsr,"x_flag_tree_slsr",0,176,88,8);
	 define_generic_field (&cl_optimization::x_flag_tree_sra,"x_flag_tree_sra",0,176,96,8);
	 define_generic_field (&cl_optimization::x_flag_tree_switch_conversion,"x_flag_tree_switch_conversion",0,176,104,8);
	 define_generic_field (&cl_optimization::x_flag_tree_tail_merge,"x_flag_tree_tail_merge",0,176,112,8);
	 define_generic_field (&cl_optimization::x_flag_tree_ter,"x_flag_tree_ter",0,176,120,8);
	 define_generic_field (&cl_optimization::x_flag_tree_vectorize,"x_flag_tree_vectorize",0,192,0,8);
	 define_generic_field (&cl_optimization::x_flag_tree_vrp,"x_flag_tree_vrp",0,192,8,8);
	 define_generic_field (&cl_optimization::x_flag_unit_at_a_time,"x_flag_unit_at_a_time",0,192,16,8);
	 define_generic_field (&cl_optimization::x_flag_unroll_all_loops,"x_flag_unroll_all_loops",0,192,24,8);
	 define_generic_field (&cl_optimization::x_flag_unroll_loops,"x_flag_unroll_loops",0,192,32,8);
	 define_generic_field (&cl_optimization::x_flag_unsafe_loop_optimizations,"x_flag_unsafe_loop_optimizations",0,192,40,8);
	 define_generic_field (&cl_optimization::x_flag_unsafe_math_optimizations,"x_flag_unsafe_math_optimizations",0,192,48,8);
	 define_generic_field (&cl_optimization::x_flag_unswitch_loops,"x_flag_unswitch_loops",0,192,56,8);
	 define_generic_field (&cl_optimization::x_flag_unwind_tables,"x_flag_unwind_tables",0,192,64,8);
	 define_generic_field (&cl_optimization::x_flag_var_tracking,"x_flag_var_tracking",0,192,72,8);
	 define_generic_field (&cl_optimization::x_flag_var_tracking_assignments,"x_flag_var_tracking_assignments",0,192,80,8);
	 define_generic_field (&cl_optimization::x_flag_var_tracking_assignments_toggle,"x_flag_var_tracking_assignments_toggle",0,192,88,8);
	 define_generic_field (&cl_optimization::x_flag_var_tracking_uninit,"x_flag_var_tracking_uninit",0,192,96,8);
	 define_generic_field (&cl_optimization::x_flag_variable_expansion_in_unroller,"x_flag_variable_expansion_in_unroller",0,192,104,8);
	 define_generic_field (&cl_optimization::x_flag_value_profile_transformations,"x_flag_value_profile_transformations",0,192,112,8);
	 define_generic_field (&cl_optimization::x_flag_web,"x_flag_web",0,192,120,8);
	 define_generic_field (&cl_optimization::x_flag_whole_program,"x_flag_whole_program",0,208,0,8);
	 define_generic_field (&cl_optimization::x_flag_wrapv,"x_flag_wrapv",0,208,8,8);
}; 
void define_class_CLS_49_cl_target_option() { 
	 define_generic_class_name<cl_target_option>("cl_target_option");
	 define_generic_field (&cl_target_option::x_ix86_isa_flags_explicit,"x_ix86_isa_flags_explicit",0,0,0,64);
	 define_generic_field (&cl_target_option::x_ix86_target_flags_explicit,"x_ix86_target_flags_explicit",0,0,64,64);
	 define_generic_field (&cl_target_option::x_ix86_arch_string,"x_ix86_arch_string",0,16,0,64);
	 define_generic_field (&cl_target_option::x_ix86_recip_name,"x_ix86_recip_name",0,16,64,64);
	 define_generic_field (&cl_target_option::x_ix86_tune_ctrl_string,"x_ix86_tune_ctrl_string",0,32,0,64);
	 define_generic_field (&cl_target_option::x_ix86_tune_memcpy_strategy,"x_ix86_tune_memcpy_strategy",0,32,64,64);
	 define_generic_field (&cl_target_option::x_ix86_tune_memset_strategy,"x_ix86_tune_memset_strategy",0,48,0,64);
	 define_generic_field (&cl_target_option::x_ix86_tune_string,"x_ix86_tune_string",0,48,64,64);
	 define_generic_field (&cl_target_option::x_ix86_isa_flags,"x_ix86_isa_flags",0,64,0,64);
	 define_generic_field (&cl_target_option::x_ix86_fpmath,"x_ix86_fpmath",0,64,64,32);
	 define_generic_field (&cl_target_option::x_ix86_asm_dialect,"x_ix86_asm_dialect",0,64,96,32);
	 define_generic_field (&cl_target_option::x_ix86_abi,"x_ix86_abi",0,80,0,32);
	 define_generic_field (&cl_target_option::x_ix86_cmodel,"x_ix86_cmodel",0,80,32,32);
	 define_generic_field (&cl_target_option::x_ix86_veclibabi_type,"x_ix86_veclibabi_type",0,80,64,32);
	 define_generic_field (&cl_target_option::x_ix86_pmode,"x_ix86_pmode",0,80,96,32);
	 define_generic_field (&cl_target_option::x_ix86_stack_protector_guard,"x_ix86_stack_protector_guard",0,96,0,32);
	 define_generic_field (&cl_target_option::x_ix86_stringop_alg,"x_ix86_stringop_alg",0,96,32,32);
	 define_generic_field (&cl_target_option::x_ix86_tls_dialect,"x_ix86_tls_dialect",0,96,64,32);
	 define_generic_field (&cl_target_option::x_ix86_branch_cost,"x_ix86_branch_cost",0,96,96,32);
	 define_generic_field (&cl_target_option::x_ix86_dump_tunes,"x_ix86_dump_tunes",0,112,0,32);
	 define_generic_field (&cl_target_option::x_ix86_force_align_arg_pointer,"x_ix86_force_align_arg_pointer",0,112,32,32);
	 define_generic_field (&cl_target_option::x_ix86_force_drap,"x_ix86_force_drap",0,112,64,32);
	 define_generic_field (&cl_target_option::x_ix86_incoming_stack_boundary_arg,"x_ix86_incoming_stack_boundary_arg",0,112,96,32);
	 define_generic_field (&cl_target_option::x_ix86_preferred_stack_boundary_arg,"x_ix86_preferred_stack_boundary_arg",0,128,0,32);
	 define_generic_field (&cl_target_option::x_ix86_regparm,"x_ix86_regparm",0,128,32,32);
	 define_generic_field (&cl_target_option::x_ix86_section_threshold,"x_ix86_section_threshold",0,128,64,32);
	 define_generic_field (&cl_target_option::x_ix86_sse2avx,"x_ix86_sse2avx",0,128,96,32);
	 define_generic_field (&cl_target_option::x_ix86_tune_no_default,"x_ix86_tune_no_default",0,144,0,32);
	 define_generic_field (&cl_target_option::x_recip_mask_explicit,"x_recip_mask_explicit",0,144,32,32);
	 define_generic_field (&cl_target_option::x_recip_mask,"x_recip_mask",0,144,64,32);
	 define_generic_field (&cl_target_option::x_target_flags,"x_target_flags",0,144,96,32);
	 define_generic_field (&cl_target_option::arch,"arch",0,160,0,8);
	 define_generic_field (&cl_target_option::arch_specified,"arch_specified",0,160,8,8);
	 define_generic_field (&cl_target_option::branch_cost,"branch_cost",0,160,16,8);
	 define_generic_field (&cl_target_option::schedule,"schedule",0,160,24,8);
	 define_generic_field (&cl_target_option::tune,"tune",0,160,32,8);
	 define_generic_field (&cl_target_option::tune_defaulted,"tune_defaulted",0,160,40,8);
}; 
void define_class_CLS_50_tree_optimization_option() { 
	 define_generic_class_name<tree_optimization_option>("tree_optimization_option");
	 define_generic_field (&tree_optimization_option::common,"common",0,0,0,192);
	 define_generic_field (&tree_optimization_option::opts,"opts",0,16,64,1696);
	 define_generic_field (&tree_optimization_option::optabs,"optabs",0,240,0,64);
	 define_generic_field (&tree_optimization_option::base_optabs,"base_optabs",0,240,64,64);
}; 
void define_class_CLS_51_tree_target_option() { 
	 define_generic_class_name<tree_target_option>("tree_target_option");
	 define_generic_field (&tree_target_option::common,"common",0,0,0,192);
	 define_generic_field (&tree_target_option::globals,"globals",0,16,64,64);
	 define_generic_field (&tree_target_option::opts,"opts",0,32,0,1344);
}; 
void define_class_CLS_52_attribute_spec() { 
	 define_generic_class_name<attribute_spec>("attribute_spec");
	 define_generic_field (&attribute_spec::name,"name",0,0,0,64);
	 define_generic_field (&attribute_spec::min_length,"min_length",0,0,64,32);
	 define_generic_field (&attribute_spec::max_length,"max_length",0,0,96,32);
	 define_generic_field (&attribute_spec::decl_required,"decl_required",0,16,0,8);
	 define_generic_field (&attribute_spec::type_required,"type_required",0,16,8,8);
	 define_generic_field (&attribute_spec::function_type_required,"function_type_required",0,16,16,8);
	 define_generic_field (&attribute_spec::handler,"handler",0,16,64,64);
	 define_generic_field (&attribute_spec::affects_type_identity,"affects_type_identity",0,32,0,8);
}; 
void define_class_CLS_53_record_layout_info_s() { 
	 define_generic_class_name<record_layout_info_s>("record_layout_info_s");
	 define_generic_field (&record_layout_info_s::t,"t",0,0,0,64);
	 define_generic_field (&record_layout_info_s::offset,"offset",0,0,64,64);
	 define_generic_field (&record_layout_info_s::offset_align,"offset_align",0,16,0,32);
	 define_generic_field (&record_layout_info_s::bitpos,"bitpos",0,16,64,64);
	 define_generic_field (&record_layout_info_s::record_align,"record_align",0,32,0,32);
	 define_generic_field (&record_layout_info_s::unpacked_align,"unpacked_align",0,32,32,32);
	 define_generic_field (&record_layout_info_s::prev_field,"prev_field",0,32,64,64);
	 define_generic_field (&record_layout_info_s::pending_statics,"pending_statics",0,48,0,64);
	 define_generic_field (&record_layout_info_s::remaining_in_alignment,"remaining_in_alignment",0,48,64,32);
	 define_generic_field (&record_layout_info_s::packed_maybe_necessary,"packed_maybe_necessary",0,48,96,32);
}; 
void define_class_CLS_54_function_args_iterator() { 
	 define_generic_class_name<function_args_iterator>("function_args_iterator");
	 define_generic_field (&function_args_iterator::next,"next",0,0,0,64);
}; 
void define_class_CLS_55_tree_map_base() { 
	 define_generic_class_name<tree_map_base>("tree_map_base");
	 define_generic_field (&tree_map_base::from,"from",0,0,0,64);
}; 
void define_class_CLS_56_tree_map() { 
	 define_generic_class_name<tree_map>("tree_map");
	 define_generic_field (&tree_map::base,"base",0,0,0,64);
	 define_generic_field (&tree_map::hash,"hash",0,0,64,32);
	 define_generic_field (&tree_map::to,"to",0,16,0,64);
}; 
void define_class_CLS_57_tree_decl_map() { 
	 define_generic_class_name<tree_decl_map>("tree_decl_map");
	 define_generic_field (&tree_decl_map::base,"base",0,0,0,64);
	 define_generic_field (&tree_decl_map::to,"to",0,0,64,64);
}; 
void define_class_CLS_58_tree_int_map() { 
	 define_generic_class_name<tree_int_map>("tree_int_map");
	 define_generic_field (&tree_int_map::base,"base",0,0,0,64);
	 define_generic_field (&tree_int_map::to,"to",0,0,64,32);
}; 
void define_class_CLS_59_tree_priority_map() { 
	 define_generic_class_name<tree_priority_map>("tree_priority_map");
	 define_generic_field (&tree_priority_map::base,"base",0,0,0,64);
	 define_generic_field (&tree_priority_map::init,"init",0,0,64,16);
	 define_generic_field (&tree_priority_map::fini,"fini",0,0,80,16);
}; 
void define_class_CLS_60_tree_vec_map() { 
	 define_generic_class_name<tree_vec_map>("tree_vec_map");
	 define_generic_field (&tree_vec_map::base,"base",0,0,0,64);
	 define_generic_field (&tree_vec_map::to,"to",0,0,64,64);
}; 
void define_class_CLS_61_call_expr_arg_iterator() { 
	 define_generic_class_name<call_expr_arg_iterator>("call_expr_arg_iterator");
	 define_generic_field (&call_expr_arg_iterator::t,"t",0,0,0,64);
	 define_generic_field (&call_expr_arg_iterator::n,"n",0,0,64,32);
	 define_generic_field (&call_expr_arg_iterator::i,"i",0,0,96,32);
}; 
void define_class_CLS_62_const_call_expr_arg_iterator() { 
	 define_generic_class_name<const_call_expr_arg_iterator>("const_call_expr_arg_iterator");
	 define_generic_field (&const_call_expr_arg_iterator::t,"t",0,0,0,64);
	 define_generic_field (&const_call_expr_arg_iterator::n,"n",0,0,64,32);
	 define_generic_field (&const_call_expr_arg_iterator::i,"i",0,0,96,32);
}; 
void define_class_CLS_63_builtin_info_type() { 
	 define_generic_class_name<builtin_info_type>("builtin_info_type");
	 define_generic_field (&builtin_info_type::decl,"decl",0,0,0,70336);
	 define_generic_field (&builtin_info_type::implicit_p,"implicit_p",0,8784,64,8792);
};

